Bootstrap: localimage
FROM: /var/lib/SingularityImages/nvidia_cuda_!{CUDA_VERSION}_cudnn!{CUDNN_MAJOR_VERSION}_devel_ubuntu!{UBUNTU_VERSION}.img
%labels
    Maintainer Stephen Fleischman
    Common packages
    Build CUDA !{CUDA_VERSION} cuDNN !{CUDNN_VERSION} x86_64 OFED IB.
%setup
    cp upload/MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}.tgz  $SINGULARITY_ROOTFS
    cp upload/hpcx-!{HPCX_VERSION}-!{HPCX_ARCH}-MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}.tbz  $SINGULARITY_ROOTFS
    cp upload/nccl_!{NCCL_VERSION}+!{NCCL_ARCH}.txz  $SINGULARITY_ROOTFS
    cp upload/Anaconda3-!{ANACONDA3_VERSION}-!{ANACONDA3_ARCH}.sh $SINGULARITY_ROOTFS
    cp upload/pycuda-!{PYCUDA_VERSION}.tar.gz $SINGULARITY_ROOTFS
    cp upload/jupyter_notebook_config.py  $SINGULARITY_ROOTFS

%help
    NVidia GPU Singularity Container with Common Packages
    Maintainer: Stephen Fleischman

%environment
    export PYTHONIOENCODING=UTF-8
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-!{HPCX_VERSION}-!{HPCX_ARCH}-MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-!{OMPI_VERSION}
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-${IPM_VERSION}
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu:/usr/local/lib
    export PATH=!{PYTHON_BIN}:${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include

%post
    echo "LC_ALL=en_US.UTF-8" >> /etc/environment
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    echo "LANG=en_US.UTF-8" > /etc/locale.conf
    export PYTHONIOENCODING=UTF-8

    export LD_LIBRARY_PATH=/host-libs:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/local/lib
    export PATH=/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export MOFED_DIR=/MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}
    export MOFED_SITE_PLACE=MLNX_OFED-!{OFED_VERSION}
    export MOFED_IMAGE=/MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}.tgz
    export HPCX_TBZ=/hpcx-!{HPCX_VERSION}-!{HPCX_ARCH}-MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}.tbz
    export ANACONDA_INSTALLER=/Anaconda3-!{ANACONDA3_VERSION}-!{ANACONDA3_ARCH}.sh
    export NCCL_TGZ=/nccl_!{NCCL_VERSION}+!{NCCL_ARCH}.txz
    export PYCUDA=pycuda-!{PYCUDA_VERSION}
    export PYCUDA_TGZ=/${PYCUDA}.tar.gz


    # Set up our notebook config.
    mkdir -p /.jupyter && mv /jupyter_notebook_config.py /.jupyter && chmod 777 /.jupyter && echo $(ls /.jupyter)
    # We will use Anaconda Python for python3
    bash $ANACONDA_INSTALLER -bfp /opt/anaconda3 && rm $ANACONDA_INSTALLER
    export PATH=!{PYTHON_BIN}:$PATH
    python3 -m pip install --upgrade pip
    python3 -m pip --no-cache-dir install pydot birdseye parallel-ssh mock scikit-image==0.14.1 graphviz
    # Cool stuff
    conda install -c conda-forge jupyterlab

    apt-get update 
    apt-get install -y --no-install-recommends \
            build-essential \
            bzip2 \
            ca-certificates \
            cmake \
            curl \
            environment-modules \
            firefox \
            gdb \
            git \
            hwloc \
            iputils-ping \
            libcurl3-dev \
            libfreetype6-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            libgtest-dev \
            libhiredis-dev \
            libhwloc-common \
            libhwloc-dev \
            libhwloc-plugins \
            libibverbs-dev \
            libiomp-dev \
            libjemalloc-dev \
            liblapack-dev \
            libleveldb-dev \
            liblmdb-dev \
            libopenblas-dev \
            libopencv-dev \
            libpng12-dev \
            libprotobuf-dev \
            libsnappy-dev \
            libtool \
            libzmq3-dev \
            lsof \
            nasm \
            net-tools \
            numactl \
            openjdk-8-jdk \
            openjdk-8-jre-headless \
            openssh-server \
            pkg-config \
            protobuf-compiler \
            pylint \
            rcs \
            redis-tools \
            rsync \
            software-properties-common \
            tar \
            unzip \
            vim \
            wget \
            xfonts-base xfce4 xfce4-goodies tightvncserver \
            zip \
            zlib1g-dev
    apt-get clean
    rm -rf /var/lib/apt/lists/*



    ########## Mellanox OFED INSTALLATION STEPS ###################
    tar -xzvf ${MOFED_IMAGE}
    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q && cd /
    rm -rf ${MOFED_DIR} ${MOFED_IMAGE}
    # Install Mellanox HPCX SDK
    ls /
    echo "HPCX_TBZ: $HPCX_TBZ"
    cd /opt &&  tar xjf ${HPCX_TBZ} && rm ${HPCX_TBZ}

    ## Put NCCL in one place
    cd /usr/local && tar xvf $NCCL_TGZ && rm $NCCL_TGZ

    #pycuda
    cd /opt
    tar xvzf $PYCUDA_TGZ && rm $PYCUDA_TGZ
    cd $PYCUDA && python setup.py install && cd .. && rm -rf $PYCUDA
    ########## Jupyter Lab Extensions ###################
    export PATH=!{PYTHON_BIN}:/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:$LD_LIBRARY_PATH
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
    curl -sL https://deb.nodesource.com/setup_11.x | bash -
    apt-get install -y nodejs
    apt-get autoremove -y
    npm install webpack -g
    npm install webpack-cli -g
    echo path to webpack $(which webpack)
    echo "node: $(which node) $(node --version)"
    echo "JUPYTER 0 $(jupyter --version)"
    pip install nodejs ipywidgets ipympl
    jupyter labextension install @jupyter-widgets/jupyterlab-manager
    #Can't stand this
    #jupyter labextension install jupyterlab_vim
    jupyter labextension install jupyter-matplotlib
    jupyter lab build
    echo "JUPYTER DONE"

    ldconfig

%runscript
    echo "Singularity Container: Ubuntu !{UBUNTU_VERSION}, Mellanox IB, OpenMPI, CUDA !{CUDA_VERSION}, cuDNN !{CUDNN_VERSION}, python !{PYTHON_VERSION}, common Ubuntu and Python packages.
    echo "The image contains: Jupyter
